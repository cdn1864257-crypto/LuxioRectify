Parfait üòé. Voici le prompt complet pr√™t √† envoyer √† Replit pour corriger d√©finitivement la r√©initialisation de mot de passe :


---

üö® Objectif :

Corriger la r√©initialisation de mot de passe pour qu‚Äôelle fonctionne correctement avec SendGrid, MongoDB, frontend multilingue, token s√©curis√© et sans erreur CSRF.


---

1Ô∏è‚É£ Backend : Exclusion CSRF pour les routes publiques

import express from 'express';
import csurf from 'csurf';
import forgotPasswordHandler from '@/api/auth/forgot-password';
import resetPasswordHandler from '@/api/auth/reset-password';

const app = express();
const csrfProtection = csurf({ cookie: true });

app.use(express.json());

// üö´ Exclure CSRF pour les routes publiques
app.post('/api/auth/forgot-password', forgotPasswordHandler);
app.post('/api/auth/reset-password', resetPasswordHandler);

// ‚úÖ Appliquer CSRF sur le reste du site
app.use(csrfProtection);


---

2Ô∏è‚É£ Utils : sendPasswordResetEmail PRO (TypeScript + Render + SendGrid + MongoDB)

import crypto from 'crypto';
import sgMail from '@sendgrid/mail';
import { Db } from 'mongodb';

const FROM_EMAIL = process.env.SENDGRID_FROM_EMAIL as string;
const SENDGRID_API_KEY = process.env.SENDGRID_API_KEY as string;
const FRONTEND_URL = (process.env.CLIENT_URL || process.env.FRONTEND_URL || 'https://luxiomarket.shop').replace(/\/$/, '');
const TOKEN_TTL_MINUTES = Number(process.env.RESET_TOKEN_TTL_MINUTES || '60');

if (!FROM_EMAIL || !SENDGRID_API_KEY) {
  console.warn('Warning: SENDGRID_FROM_EMAIL or SENDGRID_API_KEY not set.');
}

sgMail.setApiKey(SENDGRID_API_KEY);

function generateUrlSafeToken(bytes = 32) {
  const raw = crypto.randomBytes(bytes).toString('base64');
  return raw.replace(/\+/g, '-').replace(/\//g, '_').replace(/=+$/g, '');
}

function hashToken(token: string) {
  return crypto.createHash('sha256').update(token).digest('hex');
}

type SendPasswordResetOpts = {
  firstName?: string;
  locale?: string; // 'fr', 'en', 'es', etc.
  db?: Db;
};

export async function sendPasswordResetEmail(userEmail: string, opts: SendPasswordResetOpts = {}): Promise<boolean> {
  const { firstName = '', locale = 'fr', db } = opts;

  if (!userEmail) return false;
  let database: Db | undefined = db;

  try {
    if (!database) throw new Error('No DB instance provided. Pass db in opts.');

    const users = database.collection('users');
    const user = await users.findOne({ email: userEmail.toLowerCase() });
    if (!user) return true; // √©viter la fuite d‚Äôexistence de compte

    const resetToken = generateUrlSafeToken(32);
    const resetTokenHash = hashToken(resetToken);
    const expiresAt = new Date(Date.now() + TOKEN_TTL_MINUTES * 60_000);

    await users.updateOne(
      { _id: user._id },
      { $set: { 'security.resetPassword': { tokenHash: resetTokenHash, expiresAt, createdAt: new Date() } } }
    );

    const encodedToken = encodeURIComponent(resetToken);
    const resetUrl = `${FRONTEND_URL}/${locale}/reset-password?token=${encodedToken}`;

    const subjects: Record<string, string> = {
      en: 'Reset your password',
      fr: 'R√©initialiser votre mot de passe',
      es: 'Restablece tu contrase√±a',
      pt: 'Redefinir sua senha',
      hu: 'Jelsz√≥ vissza√°ll√≠t√°sa',
      it: 'Reimposta la tua password',
      pl: 'Zresetuj swoje has≈Ço',
    };
    const subject = subjects[locale] || subjects.fr;

    const plainText = `${firstName ? `Hi ${firstName},\n\n` : ''}You (or someone else) requested a password reset:\n${resetUrl}`;

    const html = `
      <html><body>
        <h2>${subject}</h2>
        <p>${firstName ? `Hello ${firstName},` : 'Hello,'}</p>
        <p>Click the button below to reset your password. Expires in ${TOKEN_TTL_MINUTES} minutes.</p>
        <p style="text-align:center;">
          <a href="${resetUrl}" target="_blank" rel="noopener noreferrer" data-sg-omit="true" 
             style="padding:12px 20px;background:#2563eb;color:#fff;text-decoration:none;border-radius:6px;font-weight:600;">
            Reset password
          </a>
        </p>
        <p>If button doesn't work, copy & paste: <a href="${resetUrl}" data-sg-omit="true">${resetUrl}</a></p>
      </body></html>
    `;

    await sgMail.send({
      to: userEmail,
      from: FROM_EMAIL,
      subject,
      text: plainText,
      html,
      trackingSettings: { clickTracking: { enable: false }, openTracking: { enable: true } },
    });

    return true;

  } catch (err: any) {
    console.error('[sendPasswordResetEmail] Error:', err);
    return false;
  }
}

export async function verifyResetToken(db: Db, token: string) {
  const users = db.collection('users');
  const tokenHash = hashToken(token);
  const user = await users.findOne({ 'security.resetPassword.tokenHash': tokenHash });
  if (!user) return null;
  const meta = user.security?.resetPassword;
  if (!meta?.expiresAt || new Date(meta.expiresAt) < new Date()) return null;
  return user;
}


---

‚úÖ Instructions √† donner √† Replit :

1. Remplacer l‚Äôancienne fonction sendPasswordResetEmail() dans utils/email.ts par ce code PRO.


2. Adapter la r√©cup√©ration de la DB dans forgot-password.ts et reset-password.ts si n√©cessaire (getDb()).


3. V√©rifier que les routes /api/auth/forgot-password et /api/auth/reset-password sont exempt√©es de CSRF.


4. S‚Äôassurer que les variables d‚Äôenvironnement sur Render sont pr√©sentes :



CLIENT_URL=https://luxiomarket.shop
FRONTEND_URL=https://luxiomarket.shop
SENDGRID_FROM_EMAIL=tonmail@gmail.com
SENDGRID_API_KEY=*********
RESET_TOKEN_TTL_MINUTES=60

5. Tester :



Cliquer sur ‚ÄúMot de passe oubli√©‚Äù ‚Üí recevoir email ‚Üí cliquer sur lien ‚Üí page multilangue s‚Äôaffiche ‚Üí soumettre nouveau mot de passe ‚Üí DB mise √† jour.



---

Si tu veux, je peux aussi te pr√©parer la version encore plus compacte ‚Äúcopier-coller‚Äù pour Replit, qui combine CSRF, multilangue et email dans un seul fichier pr√™t √† d√©ployer.

Veux‚Äëtu que je fasse √ßa‚ÄØ?

